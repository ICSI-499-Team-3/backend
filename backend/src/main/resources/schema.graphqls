type Query {
    GetAllUsers: [User!]!
    GetUserByEmail(email: String!): User
    GetUserByEmailAndPassword(input: UserLoginInput!): User

    GetAllLogs: [Log!]!
    GetLogsByUserId(userId: String!): [Log!]!

    GetMetricsByUserId(userId: String!): [Metric!]!
    GetMetricById(metricId: String!): Metric!

    GetMeasurementsByMetricId(metricId: String!): [Measurement!]!
}

type Mutation {
    CreateUser(input: UserInput!): User!
    UpdateUserName(id: String!, name: String!): User!
    UpdateUserEmail(id: String!, email: String!): User!
    UpdateUserPassword(id: String!, currentPassword: String!, newPassword: String!): User!

    CreateLog(input: LogInput!): Log!

    CreateMetric(input: MetricInput!): Metric!
    DeleteMetric(metricId: String!): Metric!

    CreateMeasurement(input: CreateMeasurementInput!): Measurement!
    UpdateMeasurement(input: UpdateMeasurementInput!): Measurement!
    DeleteMeasurement(metricId: String!, input: [String!]!): [Measurement!]!
}

type User {
    id: ID!
    name: String!
    email: String!
    authToken: String!
}

input UserInput {
    name: String!
    email: String!
    password: String!
}

type Log {
    id: ID!
    userId: String!

    # Unix ts since epoch representing the date and time the activity took place
    dateTimeOfActivity: Float!

    notes: String
    categories: [String!]
    mood: [String!]
}

input LogInput {
    userId: String!
    dateTimeOfActivity: Float!
    notes: String
    categories: [String!]
    mood: [String!]
}

type Metric {
    id: ID!
    userId: String!
    title: String!
    xUnits: String!
    yUnits: String!
    data: [Measurement!]
}

input MetricInput {
    userId: String!
    title: String!
    xUnits: String!
    yUnits: String!
}

type Measurement {
    id: ID!
    x: String!
    y: String!
    dateTimeMeasured: Float!
}

input UpdateMeasurementInput {
    id: String!
    metricId: String!
    x: String!
    y: String!
    dateTimeMeasured: Float!
}

input CreateMeasurementInput {
    metricId: String!
    x: String!
    y: String!
    dateTimeMeasured: Float!
}

input UserLoginInput {
    email: String!
    password: String!
}
